import Head from "next/head";

import Navbar from "@/components/Common/Navbar";
import Footer from "@/components/Common/Footer";
import SocialMedia from "@/components/Common/SocialMedia";
import { ArrowLeft } from "@/Icons/index";

import { toast } from "react-toastify";

import { useDispatch } from "react-redux";

import axiosInstance from "@/axios";

export default function Home() {
  const [simulationHistory, setSimulationHistory] = useState(null);
  const dispatch = useDispatch();
  const getSimulationsHistory = async () => {
    // Add logic to reset the password using the verification code and new password
    // You may need to send another request to the server
    try {
      // Dispatch a loading action to set loading state to true
      dispatch({ type: "SIMULATION_HISTORY_START" });
      const accessToken = localStorage.getItem("AccessToken");
      const response = await axiosInstance.get("get-simulation-history", {
        headers: {
          Authorization: `Bearer ${accessToken}`,
        },
      });
      // Dispatch the combatantDefinition action to update state with the fetched data
      console.log(response.data);
      setSimulationHistory(response.data);
      // Show success toast
      toast.success("Simulatiuon History Get successfully", {
        position: "bottom-right",
        autoClose: 3000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
      });
      // Dispatch a success action or set loading state to false if needed
      dispatch({ type: "SIMULATION_HISTORY_SUCCESS" });
    } catch (error) {
      console.error("Password reset error:", error);

      // Show error toast
      toast.error("An error occurred during password reset", {
        position: "bottom-right",
        autoClose: 3000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
      });

      // Propagate the error for the component to handle
      throw error;
    }
  };

  useEffect(() => {
    getSimulationsHistory();
  }, []);
  return (
    <>
      <Head>
        <title>Encountera</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Navbar />
        <div className="ts-main-wrapper">
          <div className="d-none d-lg-block">
            <SocialMedia />
          </div>
          <div className="my-5">
            <div className="ts-container">
              <a
                className="ts-btn ts-btn-gray rounded-3  px-3 d-inline-flex  align-items-center mb-04"
                href="./"
              >
                {" "}
                <span className="me-2">
                  <ArrowLeft Width="16" Height="16" Fill="white" />
                </span>
                Back
              </a>

              <h1 className="ts-fs-40 text-uppercase text-center mb-09 fw-bold">
                simulation results
              </h1>
              <div className="ts-card-2 px-4 py-5">
                {simulationHistory && (
                  <Results simulationHistory={simulationHistory} />
                )}
              </div>
            </div>
          </div>
        </div>
        <Footer />
      </main>
    </>
  );
}

import Accordion from "react-bootstrap/Accordion";
import { useEffect, useState } from "react";

function Results({ simulationHistory }) {
  return (
    <Accordion defaultActiveKey="0">
      {simulationHistory.map((simulation, index) => (
        <AccordionItem key={index} simulation={simulation} />
      ))}
    </Accordion>
  );
}

function AccordionItem({ simulation }) {
  const simulationStats = JSON.stringify(simulation.stats, null, 2);

  return (
    <Accordion.Item eventKey={simulation.id}>
      <Accordion.Header>
        <div className="row row-cols-2 row-cols-md-4 w-100 ts-text-gray-2">
          <div className="text-center mb-4 mb-md-0">
            <h3 className="ts-fs-22 text-uppercase fw-bold">DATE</h3>
            <p className="ts-fs-20 fw-medium mb-0">
              {simulation.simulation_date}
            </p>
          </div>
          <div className="text-center mb-4 mb-md-0">
            <h3 className="ts-fs-22 text-uppercase fw-bold">iterntions</h3>
            <p className="ts-fs-20 fw-medium mb-0">{simulation.iterations}</p>
          </div>
          <div className="text-center ">
            <h3 className="ts-fs-22 ts-text-skyblue text-uppercase fw-bold">
              Blue Team
            </h3>
            <p className="ts-fs-20 fw-medium mb-0">01-11-2023</p>
          </div>
          <div className="text-center">
            <h3 className="ts-fs-22 ts-text-red text-uppercase fw-bold">
              Red Team
            </h3>
            <p className="ts-fs-20 fw-medium mb-0">01-11-2023</p>
          </div>
        </div>
      </Accordion.Header>
      <Accordion.Body>
        <pre>
          <code>{simulationStats}</code>
        </pre>
      </Accordion.Body>
    </Accordion.Item>
  );
}
