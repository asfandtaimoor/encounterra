import React, { useEffect, useState } from "react";

import Head from "next/head";
import { Container, Tab, Nav } from "react-bootstrap";

import Navbar from "@/components/Common/Navbar";
import Footer from "@/components/Common/Footer";
import MapMain from "@/components/Map";
import SocialMedia from "@/components/Common/SocialMedia";
import Simulation from "@/components/Simulation";
import Compatant from "@/components/Compatant";
import { useSelector } from "react-redux";

// import { fetchCombatants } from "@/redux/actions";

// import {
//   fetchCombatants,
//   fetchCombatantsStart,
//   fetchCombatantsSuccess,
//   fetchCombatantsFailure,
// } from "./combatantsActions";

import { useDispatch } from "react-redux";
import { updateCombatantDefinition } from "@/redux/reducers/combatantsReducer";
import axios from "axios";

const projectTabs = [
  {
    title: "Compatatnt Selecttion",
  },
  {
    title: "Map Selection",
  },
  {
    title: "Simulation",
  },
];

export default function Home() {
  const [userData, setUserData] = useState({ email: null, credits: null });
  const dispatch = useDispatch();
  // const { combatantsReducer } = useSelector((state) => state.combatantsReducer);

  // const fetchCombatants = async (accessToken) => {
  //   try {
  //     // Dispatch a loading action to set loading state to true
  //     dispatch({ type: "FETCH_COMBATANTS_START" });

  //     // Use axios or your preferred HTTP client to make the API call
  //     const response = await axios.get(
  //       "https://encounterra.com/api/combatant-definition",
  //       {
  //         headers: {
  //           Authorization: `Bearer ${accessToken}`,
  //         },
  //       }
  //     );

  //     console.log("Response:", response.data);

  //     const data = response.data;

  //     // Dispatch the combatantDefinition action to update state with the fetched data
  //     dispatch(updateCombatantDefinition(data));

  //     // Dispatch a success action or set loading state to false if needed
  //     dispatch({ type: "FETCH_COMBATANTS_SUCCESS" });
  //   } catch (error) {
  //     console.error("Fetch combatants error:", error);

  //     // Dispatch an error action to update state with the error message
  //     dispatch({
  //       type: "FETCH_COMBATANTS_FAILURE",
  //       payload: error.message || "An error occurred while fetching combatants",
  //     });

  //     // Propagate the error for the component to handle
  //     throw error;
  //   }
  // };

  // useEffect(() => {
  //   const accessToken = localStorage.getItem("AccessToken");

  //   if (accessToken) {
  //     fetchCombatants(accessToken);
  //   } else {
  //     console.error("Access token not available");
  //   }
  // }, [dispatch]);

  const combatantsDefinition = useSelector(
    (state) => state.combatantsDefinition
  );

  return (
    <>
      <Head>
        <title>Encountera</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Navbar />

        {/* Other components and logic */}

        {/* <h1>Combatant Definition: {JSON.stringify(combatantsDefinition)}</h1> */}

        {/* <div className="d-none d-lg-block">
          <SocialMedia />
        </div>
        <div className="ts-main-content">
          <Container fluid className="ts-container">
            <Tab.Container
              id="GiveAwayTabs"
              defaultActiveKey={projectTabs[0].title}
            >
              <div className="d-flex justify-content-center mb-08">
                <Nav variant="pills" className="ts-tabs ts-tabs-primary">
                  {projectTabs.map((tabItem, index) => {
                    return (
                      <Nav.Item className="text-center " key={index}>
                        <Nav.Link eventKey={tabItem.title}>
                          {" "}
                          <span> {tabItem.title} </span>
                        </Nav.Link>
                      </Nav.Item>
                    );
                  })}
                </Nav>
              </div>

              <Tab.Content>
                <Tab.Pane eventKey={projectTabs[0].title}>
                  <Compatant />
                </Tab.Pane>
                <Tab.Pane eventKey={projectTabs[1].title}>
                  <MapMain />
                </Tab.Pane>
                <Tab.Pane eventKey={projectTabs[2].title}>
                  <Simulation />
                </Tab.Pane>
              </Tab.Content>
            </Tab.Container>
          </Container>
        </div> */}
        <Footer />
      </main>
    </>
  );
}
